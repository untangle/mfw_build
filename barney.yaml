# Copyright (c) 2022 Arista Networks, Inc.  All rights reserved.
# Arista Networks, Inc. Confidential and Proprietary.

images:
  build-floor:
    units:
      - image: barney.ci/debian%network
      - image: barney.ci/debian%pkg/build-essential
      - image: barney.ci/debian%pkg/curl
      - image: barney.ci/debian%pkg/file
      - image: barney.ci/debian%pkg/gawk
      - image: barney.ci/debian%pkg/gettext
      - image: barney.ci/debian%pkg/git
      - image: barney.ci/debian%pkg/libncurses-dev
      - image: barney.ci/debian%pkg/libssl-dev
      - image: barney.ci/debian%pkg/meson
      - image: barney.ci/debian%pkg/openssh-client
      - image: barney.ci/debian%pkg/perl-openssl-defaults
      - image: barney.ci/debian%pkg/python3
      - image: barney.ci/debian%pkg/python3-distutils-extra
      - image: barney.ci/debian%pkg/qemu-utils
      - image: barney.ci/debian%pkg/rsync
      - image: barney.ci/debian%pkg/ruby-sass
      - image: barney.ci/debian%pkg/swig
      - image: barney.ci/debian%pkg/time
      - image: barney.ci/debian%pkg/unzip
      - image: barney.ci/debian%pkg/wget
      - image: barney.ci/debian%pkg/zlib1g-dev
    entry:
      mutables:
        - /root
      env:
        FORCE_UNSAFE_CONFIGURE: 1
        HOME: /root

  test/build-floor:
    description: |
      Check that we can run a couple of utilities
    units:
      - floor: .%build-floor
        quota:
          memory: 100Mi
          cpu: 1
        build: |
          curl --version
          make --version
          meson --version
          python3 --version

  toolchain:
    description: |
      Build an x86_64 openwrt toolchain for musl, and store the
      corresponding staging_dir under /mfw-toolchain.
      This directory can be then copied into the openwrt downstream
      builds, by copying it back into the corresponding source tree.
    units:
      - image: .%build-floor
      - floor: .%build-floor
        sources: [code.arista.io/mfw/build, github.com/untangle/openwrt]
        quota:
          memory: 17Gi
          cpu: 9
        build: |
          set -e
          # barney sets DESTDIR to /dest, but this really confuses openwrt
          unset DESTDIR
          # build toolchain
          cd /src/github.com/untangle/openwrt
          /src/code.arista.io/mfw/build/build.sh -u -t toolchain/install
          # store built toolchain
          mkdir -p /dest/mfw-toolchain
          cp -a staging_dir/ /dest/mfw-toolchain/

  test/toolchain:
    description: |
      Check that gcc can run
    units:
      - floor: .%toolchain
        quota:
          memory: 0.01Gi
          cpu: 1
        build: |
          /mfw-toolchain/staging_dir/toolchain-x86_64_gcc-8.4.0_musl/bin/x86_64-openwrt-linux-musl-gcc --version

  toolchain-glibc:
    description: |
      Build an x86_64 openwrt toolchain for glibc, and store the
      corresponding staging_dir under /mfw-toolchain.
      This directory can be then copied into the openwrt downstream
      builds, by copying it back into the corresponding source tree.
    units:
      - image: .%build-floor
      - floor: .%build-floor
        sources: [code.arista.io/mfw/build, github.com/untangle/openwrt]
        quota:
          memory: 19Gi
          cpu: 9
        build: |
          set -e
          # barney sets DESTDIR to /dest, but this really confuses openwrt
          unset DESTDIR
          # build toolchain
          cd /src/github.com/untangle/openwrt
          /src/code.arista.io/mfw/build/build.sh -l glibc -u -t toolchain/install
          # store built toolchain
          mkdir -p /dest/mfw-toolchain
          cp -a staging_dir/ /dest/mfw-toolchain/

  test/toolchain-glibc:
    description: |
      Check that gcc can run
    units:
      - floor: .%toolchain-glibc
        quota:
          memory: 0.01Gi
          cpu: 1
        build: |
          /mfw-toolchain/staging_dir/toolchain-x86_64_gcc-8.4.0_glibc/bin/x86_64-openwrt-linux-gnu-gcc --version

  golang:
    description: |
      Build the golang compiler on top of the x86_64 openwrt toolchain.
    units:
      - image: .%toolchain
      - floor: .%toolchain
        sources: [code.arista.io/mfw/build, github.com/untangle/openwrt]
        quota:
          memory: 7Gi
          cpu: 2.5
        build: |
          set -e
          # copy build%toolchain's staging_dir into our source tree
          cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
          # barney sets DESTDIR to /dest, but this really confuses openwrt
          unset DESTDIR
          # build golang
          cd /src/github.com/untangle/openwrt
          /src/code.arista.io/mfw/build/build.sh -u -t package/feeds/packages/golang/host/compile
          # store built golang alongside existing toolchain
          mkdir -p /dest/mfw-toolchain/staging_dir/
          cp -a staging_dir/hostpkg /dest/mfw-toolchain/staging_dir/

  test/golang:
    description: |
      Check that the golang compiler can run
    units:
      - floor: .%golang
        quota:
          memory: 0.03Gi
          cpu: 1
        build: |
          /mfw-toolchain/staging_dir/hostpkg/bin/go version

  golang-glibc:
    description: |
      Build the golang compiler on top of the x86_64 openwrt toolchain
      for glibc.
    units:
      - image: .%toolchain-glibc
      - floor: .%toolchain-glibc
        sources: [code.arista.io/mfw/build, github.com/untangle/openwrt]
        quota:
          memory: 7Gi
          cpu: 2.5
        build: |
          set -e
          # copy build%toolchain-glibc's staging_dir into our source tree
          cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
          # barney sets DESTDIR to /dest, but this really confuses openwrt
          unset DESTDIR
          # build golang
          cd /src/github.com/untangle/openwrt
          /src/code.arista.io/mfw/build/build.sh -l glibc -u -t package/feeds/packages/golang/host/compile
          # store built golang alongside existing toolchain
          mkdir -p /dest/mfw-toolchain/staging_dir/
          cp -a staging_dir/hostpkg /dest/mfw-toolchain/staging_dir/

  test/golang-glibc:
    description: |
      Check that the golang-glibc compiler can run
    units:
      - floor: .%golang-glibc
        quota:
          memory: 0.02Gi
          cpu: 1
        build: |
          /mfw-toolchain/staging_dir/hostpkg/bin/go version

  world:
    description: |
      Almost-vanilla openwrt image, with just our kernel patches but no
      additional configuration or packages.

      This is mostly used as a testbed for installing packages, but it
      does not qualify as a valid MFW base layer (see
      code.arista.io/mfw/image%internal/mfw-base for that).
    units:
      - floor: .%toolchain
        sources:
          - code.arista.io/mfw/build
          - github.com/untangle/openwrt
        quota:
          memory: 19.5Gi
          cpu: 8
        build: |
          set -e
          # copy build%toolchain's staging_dir into our source tree
          cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
          # barney sets DESTDIR to /dest, but this really confuses openwrt
          unset DESTDIR
          # build our world image
          cd /src/github.com/untangle/openwrt
          /src/code.arista.io/mfw/build/build.sh -u
          # extract FS content into destination image
          tar -C /dest -xavf bin/targets/x86/64/mfw-x86-64-generic-rootfs.tar.gz

  test/world:
    description: |
      Check that some basic openwrt utilities can run
    units:
      - floor: .%world
        quota:
          memory: 0.01Gi
          cpu: 1
        build: |
          date
          ls
          ps

  world-glibc:
    description: |
      Almost-vanilla glibc-based openwrt image, with just our kernel
      patches but no additional configuration or packages.

      This is mostly used as a testbed for installing packages, but it
      does not qualify as a valid MFW base layer (see
      code.arista.io/mfw/image%internal/mfw-base for that).
    units:
      - floor: .%toolchain-glibc
        sources:
          - code.arista.io/mfw/build
          - github.com/untangle/openwrt
        quota:
          memory: 20Gi
          cpu: 7
        build: |
          set -e
          # copy build%toolchain's staging_dir into our source tree
          cp -a /mfw-toolchain/staging_dir /src/github.com/untangle/openwrt/
          # barney sets DESTDIR to /dest, but this really confuses openwrt
          unset DESTDIR
          # build our world image
          cd /src/github.com/untangle/openwrt
          /src/code.arista.io/mfw/build/build.sh -l glibc -u
          # extract FS content into destination image
          tar -C /dest -xavf bin/targets/x86/64-glibc/mfw-x86-64-generic-rootfs.tar.gz

  test/world-glibc:
    description: |
      Check that some basic openwrt utilities can run
    units:
      - floor: .%world-glibc
        quota:
          memory: 0.01Gi
          cpu: 1
        build: |
          date
          ls
          ps

  ################
  #
  # Validate non-code files
  #
  #########

  tests/internal/renovate-json5-floor:
    entry:
      mutables:
        - /etc        # for error unable to clean up mess surrounding './etc/apache2' before installing another version: Read-only file system
        - /usr        # for apt
        - /var/cache  # for apt
        - /var/lib    # for apt
        - /var/log    # for apt
    units:
      - image: barney.ci/debian%minbase
      - image: barney.ci/debian%network

  tests/renovate-json5:
    units:
      - floor: .%tests/internal/renovate-json5-floor
        sources:
          - code.arista.io/mfw/build # to get sources under stable path
        quota:
          memory: 0.5Gi
          cpu: 1.5
        build: |
          apt update
          apt install -y node-json5
          json5 --validate /src/code.arista.io/mfw/build/renovate.json5
